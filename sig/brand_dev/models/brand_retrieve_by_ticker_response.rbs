module BrandDev
  module Models
    type brand_retrieve_by_ticker_response =
      {
        brand: BrandDev::Models::BrandRetrieveByTickerResponse::Brand,
        code: Integer,
        status: String
      }

    class BrandRetrieveByTickerResponse < BrandDev::Internal::Type::BaseModel
      attr_reader brand: BrandDev::Models::BrandRetrieveByTickerResponse::Brand?

      def brand=: (
        BrandDev::Models::BrandRetrieveByTickerResponse::Brand
      ) -> BrandDev::Models::BrandRetrieveByTickerResponse::Brand

      attr_reader code: Integer?

      def code=: (Integer) -> Integer

      attr_reader status: String?

      def status=: (String) -> String

      def initialize: (
        ?brand: BrandDev::Models::BrandRetrieveByTickerResponse::Brand,
        ?code: Integer,
        ?status: String
      ) -> void

      def to_hash: -> {
        brand: BrandDev::Models::BrandRetrieveByTickerResponse::Brand,
        code: Integer,
        status: String
      }

      type brand =
        {
          address: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Address,
          backdrops: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop],
          colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Color],
          description: String,
          domain: String,
          fonts: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Font],
          logos: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo],
          slogan: String,
          socials: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Social],
          stock: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Stock,
          title: String
        }

      class Brand < BrandDev::Internal::Type::BaseModel
        attr_reader address: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Address?

        def address=: (
          BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Address
        ) -> BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Address

        attr_reader backdrops: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop]?

        def backdrops=: (
          ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop]
        ) -> ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop]

        attr_reader colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Color]?

        def colors=: (
          ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Color]
        ) -> ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Color]

        attr_reader description: String?

        def description=: (String) -> String

        attr_reader domain: String?

        def domain=: (String) -> String

        attr_reader fonts: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Font]?

        def fonts=: (
          ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Font]
        ) -> ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Font]

        attr_reader logos: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo]?

        def logos=: (
          ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo]
        ) -> ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo]

        attr_reader slogan: String?

        def slogan=: (String) -> String

        attr_reader socials: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Social]?

        def socials=: (
          ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Social]
        ) -> ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Social]

        attr_reader stock: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Stock?

        def stock=: (
          BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Stock
        ) -> BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Stock

        attr_reader title: String?

        def title=: (String) -> String

        def initialize: (
          ?address: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Address,
          ?backdrops: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop],
          ?colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Color],
          ?description: String,
          ?domain: String,
          ?fonts: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Font],
          ?logos: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo],
          ?slogan: String,
          ?socials: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Social],
          ?stock: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Stock,
          ?title: String
        ) -> void

        def to_hash: -> {
          address: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Address,
          backdrops: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop],
          colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Color],
          description: String,
          domain: String,
          fonts: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Font],
          logos: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo],
          slogan: String,
          socials: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Social],
          stock: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Stock,
          title: String
        }

        type address =
          {
            city: String,
            country: String,
            country_code: String,
            postal_code: String,
            state_code: String,
            state_province: String,
            street: String
          }

        class Address < BrandDev::Internal::Type::BaseModel
          attr_reader city: String?

          def city=: (String) -> String

          attr_reader country: String?

          def country=: (String) -> String

          attr_reader country_code: String?

          def country_code=: (String) -> String

          attr_reader postal_code: String?

          def postal_code=: (String) -> String

          attr_reader state_code: String?

          def state_code=: (String) -> String

          attr_reader state_province: String?

          def state_province=: (String) -> String

          attr_reader street: String?

          def street=: (String) -> String

          def initialize: (
            ?city: String,
            ?country: String,
            ?country_code: String,
            ?postal_code: String,
            ?state_code: String,
            ?state_province: String,
            ?street: String
          ) -> void

          def to_hash: -> {
            city: String,
            country: String,
            country_code: String,
            postal_code: String,
            state_code: String,
            state_province: String,
            street: String
          }
        end

        type backdrop =
          {
            colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Color],
            resolution: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Resolution,
            url: String
          }

        class Backdrop < BrandDev::Internal::Type::BaseModel
          attr_reader colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Color]?

          def colors=: (
            ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Color]
          ) -> ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Color]

          attr_reader resolution: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Resolution?

          def resolution=: (
            BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Resolution
          ) -> BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Resolution

          attr_reader url: String?

          def url=: (String) -> String

          def initialize: (
            ?colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Color],
            ?resolution: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Resolution,
            ?url: String
          ) -> void

          def to_hash: -> {
            colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Color],
            resolution: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Backdrop::Resolution,
            url: String
          }

          type color = { hex: String, name: String }

          class Color < BrandDev::Internal::Type::BaseModel
            attr_reader hex: String?

            def hex=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            def initialize: (?hex: String, ?name: String) -> void

            def to_hash: -> { hex: String, name: String }
          end

          type resolution = { height: Integer, width: Integer }

          class Resolution < BrandDev::Internal::Type::BaseModel
            attr_reader height: Integer?

            def height=: (Integer) -> Integer

            attr_reader width: Integer?

            def width=: (Integer) -> Integer

            def initialize: (?height: Integer, ?width: Integer) -> void

            def to_hash: -> { height: Integer, width: Integer }
          end
        end

        type color = { hex: String, name: String }

        class Color < BrandDev::Internal::Type::BaseModel
          attr_reader hex: String?

          def hex=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          def initialize: (?hex: String, ?name: String) -> void

          def to_hash: -> { hex: String, name: String }
        end

        type font = { name: String, usage: String }

        class Font < BrandDev::Internal::Type::BaseModel
          attr_reader name: String?

          def name=: (String) -> String

          attr_reader usage: String?

          def usage=: (String) -> String

          def initialize: (?name: String, ?usage: String) -> void

          def to_hash: -> { name: String, usage: String }
        end

        type logo =
          {
            colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Color],
            group: Integer,
            mode: String,
            resolution: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Resolution,
            url: String
          }

        class Logo < BrandDev::Internal::Type::BaseModel
          attr_reader colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Color]?

          def colors=: (
            ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Color]
          ) -> ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Color]

          attr_reader group: Integer?

          def group=: (Integer) -> Integer

          attr_reader mode: String?

          def mode=: (String) -> String

          attr_reader resolution: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Resolution?

          def resolution=: (
            BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Resolution
          ) -> BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Resolution

          attr_reader url: String?

          def url=: (String) -> String

          def initialize: (
            ?colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Color],
            ?group: Integer,
            ?mode: String,
            ?resolution: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Resolution,
            ?url: String
          ) -> void

          def to_hash: -> {
            colors: ::Array[BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Color],
            group: Integer,
            mode: String,
            resolution: BrandDev::Models::BrandRetrieveByTickerResponse::Brand::Logo::Resolution,
            url: String
          }

          type color = { hex: String, name: String }

          class Color < BrandDev::Internal::Type::BaseModel
            attr_reader hex: String?

            def hex=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            def initialize: (?hex: String, ?name: String) -> void

            def to_hash: -> { hex: String, name: String }
          end

          type resolution = { height: Integer, width: Integer }

          class Resolution < BrandDev::Internal::Type::BaseModel
            attr_reader height: Integer?

            def height=: (Integer) -> Integer

            attr_reader width: Integer?

            def width=: (Integer) -> Integer

            def initialize: (?height: Integer, ?width: Integer) -> void

            def to_hash: -> { height: Integer, width: Integer }
          end
        end

        type social = { type: String, url: String }

        class Social < BrandDev::Internal::Type::BaseModel
          attr_reader type: String?

          def type=: (String) -> String

          attr_reader url: String?

          def url=: (String) -> String

          def initialize: (?type: String, ?url: String) -> void

          def to_hash: -> { type: String, url: String }
        end

        type stock = { exchange: String, ticker: String }

        class Stock < BrandDev::Internal::Type::BaseModel
          attr_reader exchange: String?

          def exchange=: (String) -> String

          attr_reader ticker: String?

          def ticker=: (String) -> String

          def initialize: (?exchange: String, ?ticker: String) -> void

          def to_hash: -> { exchange: String, ticker: String }
        end
      end
    end
  end
end
