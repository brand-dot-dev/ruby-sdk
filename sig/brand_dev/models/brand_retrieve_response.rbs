module BrandDev
  module Models
    type brand_retrieve_response =
      {
        brand: BrandDev::Models::BrandRetrieveResponse::Brand,
        code: Integer,
        status: String
      }

    class BrandRetrieveResponse < BrandDev::Internal::Type::BaseModel
      attr_reader brand: BrandDev::Models::BrandRetrieveResponse::Brand?

      def brand=: (
        BrandDev::Models::BrandRetrieveResponse::Brand
      ) -> BrandDev::Models::BrandRetrieveResponse::Brand

      attr_reader code: Integer?

      def code=: (Integer) -> Integer

      attr_reader status: String?

      def status=: (String) -> String

      def initialize: (
        ?brand: BrandDev::Models::BrandRetrieveResponse::Brand,
        ?code: Integer,
        ?status: String
      ) -> void

      def to_hash: -> {
        brand: BrandDev::Models::BrandRetrieveResponse::Brand,
        code: Integer,
        status: String
      }

      type brand =
        {
          address: BrandDev::Models::BrandRetrieveResponse::Brand::Address,
          backdrops: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop],
          colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Color],
          description: String,
          domain: String,
          email: String,
          industries: BrandDev::Models::BrandRetrieveResponse::Brand::Industries,
          is_nsfw: bool,
          logos: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo],
          phone: String,
          slogan: String,
          socials: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Social],
          stock: BrandDev::Models::BrandRetrieveResponse::Brand::Stock,
          title: String
        }

      class Brand < BrandDev::Internal::Type::BaseModel
        attr_reader address: BrandDev::Models::BrandRetrieveResponse::Brand::Address?

        def address=: (
          BrandDev::Models::BrandRetrieveResponse::Brand::Address
        ) -> BrandDev::Models::BrandRetrieveResponse::Brand::Address

        attr_reader backdrops: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop]?

        def backdrops=: (
          ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop]
        ) -> ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop]

        attr_reader colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Color]?

        def colors=: (
          ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Color]
        ) -> ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Color]

        attr_reader description: String?

        def description=: (String) -> String

        attr_reader domain: String?

        def domain=: (String) -> String

        attr_reader email: String?

        def email=: (String) -> String

        attr_reader industries: BrandDev::Models::BrandRetrieveResponse::Brand::Industries?

        def industries=: (
          BrandDev::Models::BrandRetrieveResponse::Brand::Industries
        ) -> BrandDev::Models::BrandRetrieveResponse::Brand::Industries

        attr_reader is_nsfw: bool?

        def is_nsfw=: (bool) -> bool

        attr_reader logos: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo]?

        def logos=: (
          ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo]
        ) -> ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo]

        attr_reader phone: String?

        def phone=: (String) -> String

        attr_reader slogan: String?

        def slogan=: (String) -> String

        attr_reader socials: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Social]?

        def socials=: (
          ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Social]
        ) -> ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Social]

        attr_reader stock: BrandDev::Models::BrandRetrieveResponse::Brand::Stock?

        def stock=: (
          BrandDev::Models::BrandRetrieveResponse::Brand::Stock
        ) -> BrandDev::Models::BrandRetrieveResponse::Brand::Stock

        attr_reader title: String?

        def title=: (String) -> String

        def initialize: (
          ?address: BrandDev::Models::BrandRetrieveResponse::Brand::Address,
          ?backdrops: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop],
          ?colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Color],
          ?description: String,
          ?domain: String,
          ?email: String,
          ?industries: BrandDev::Models::BrandRetrieveResponse::Brand::Industries,
          ?is_nsfw: bool,
          ?logos: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo],
          ?phone: String,
          ?slogan: String,
          ?socials: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Social],
          ?stock: BrandDev::Models::BrandRetrieveResponse::Brand::Stock,
          ?title: String
        ) -> void

        def to_hash: -> {
          address: BrandDev::Models::BrandRetrieveResponse::Brand::Address,
          backdrops: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop],
          colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Color],
          description: String,
          domain: String,
          email: String,
          industries: BrandDev::Models::BrandRetrieveResponse::Brand::Industries,
          is_nsfw: bool,
          logos: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo],
          phone: String,
          slogan: String,
          socials: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Social],
          stock: BrandDev::Models::BrandRetrieveResponse::Brand::Stock,
          title: String
        }

        type address =
          {
            city: String,
            country: String,
            country_code: String,
            postal_code: String,
            state_code: String,
            state_province: String,
            street: String
          }

        class Address < BrandDev::Internal::Type::BaseModel
          attr_reader city: String?

          def city=: (String) -> String

          attr_reader country: String?

          def country=: (String) -> String

          attr_reader country_code: String?

          def country_code=: (String) -> String

          attr_reader postal_code: String?

          def postal_code=: (String) -> String

          attr_reader state_code: String?

          def state_code=: (String) -> String

          attr_reader state_province: String?

          def state_province=: (String) -> String

          attr_reader street: String?

          def street=: (String) -> String

          def initialize: (
            ?city: String,
            ?country: String,
            ?country_code: String,
            ?postal_code: String,
            ?state_code: String,
            ?state_province: String,
            ?street: String
          ) -> void

          def to_hash: -> {
            city: String,
            country: String,
            country_code: String,
            postal_code: String,
            state_code: String,
            state_province: String,
            street: String
          }
        end

        type backdrop =
          {
            colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Color],
            resolution: BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Resolution,
            url: String
          }

        class Backdrop < BrandDev::Internal::Type::BaseModel
          attr_reader colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Color]?

          def colors=: (
            ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Color]
          ) -> ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Color]

          attr_reader resolution: BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Resolution?

          def resolution=: (
            BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Resolution
          ) -> BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Resolution

          attr_reader url: String?

          def url=: (String) -> String

          def initialize: (
            ?colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Color],
            ?resolution: BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Resolution,
            ?url: String
          ) -> void

          def to_hash: -> {
            colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Color],
            resolution: BrandDev::Models::BrandRetrieveResponse::Brand::Backdrop::Resolution,
            url: String
          }

          type color = { hex: String, name: String }

          class Color < BrandDev::Internal::Type::BaseModel
            attr_reader hex: String?

            def hex=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            def initialize: (?hex: String, ?name: String) -> void

            def to_hash: -> { hex: String, name: String }
          end

          type resolution =
            { aspect_ratio: Float, height: Integer, width: Integer }

          class Resolution < BrandDev::Internal::Type::BaseModel
            attr_reader aspect_ratio: Float?

            def aspect_ratio=: (Float) -> Float

            attr_reader height: Integer?

            def height=: (Integer) -> Integer

            attr_reader width: Integer?

            def width=: (Integer) -> Integer

            def initialize: (
              ?aspect_ratio: Float,
              ?height: Integer,
              ?width: Integer
            ) -> void

            def to_hash: -> {
              aspect_ratio: Float,
              height: Integer,
              width: Integer
            }
          end
        end

        type color = { hex: String, name: String }

        class Color < BrandDev::Internal::Type::BaseModel
          attr_reader hex: String?

          def hex=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          def initialize: (?hex: String, ?name: String) -> void

          def to_hash: -> { hex: String, name: String }
        end

        type industries =
          {
            eic: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic]
          }

        class Industries < BrandDev::Internal::Type::BaseModel
          attr_reader eic: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic]?

          def eic=: (
            ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic]
          ) -> ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic]

          def initialize: (
            ?eic: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic]
          ) -> void

          def to_hash: -> {
            eic: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic]
          }

          type eic =
            {
              industry: BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic::industry,
              subindustry: BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic::subindustry
            }

          class Eic < BrandDev::Internal::Type::BaseModel
            attr_accessor industry: BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic::industry

            attr_accessor subindustry: BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic::subindustry

            def initialize: (
              industry: BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic::industry,
              subindustry: BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic::subindustry
            ) -> void

            def to_hash: -> {
              industry: BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic::industry,
              subindustry: BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic::subindustry
            }

            type industry =
              :"Aerospace & Defense"
              | :Technology
              | :Finance
              | :Healthcare
              | :"Retail & E-commerce"
              | :Entertainment
              | :Education
              | :"Government & Nonprofit"
              | :"Industrial & Energy"
              | :"Automotive & Transportation"
              | :"Lifestyle & Leisure"
              | :"Luxury & Fashion"
              | :"News & Media"
              | :Sports
              | :"Real Estate & PropTech"
              | :"Legal & Compliance"
              | :Telecommunications
              | :"Agriculture & Food"
              | :"Professional Services & Agencies"
              | :"Chemicals & Materials"
              | :"Logistics & Supply Chain"
              | :"Hospitality & Tourism"
              | :"Construction & Built Environment"
              | :"Consumer Packaged Goods (CPG)"

            module Industry
              extend BrandDev::Internal::Type::Enum

              AEROSPACE_DEFENSE: :"Aerospace & Defense"
              TECHNOLOGY: :Technology
              FINANCE: :Finance
              HEALTHCARE: :Healthcare
              RETAIL_E_COMMERCE: :"Retail & E-commerce"
              ENTERTAINMENT: :Entertainment
              EDUCATION: :Education
              GOVERNMENT_NONPROFIT: :"Government & Nonprofit"
              INDUSTRIAL_ENERGY: :"Industrial & Energy"
              AUTOMOTIVE_TRANSPORTATION: :"Automotive & Transportation"
              LIFESTYLE_LEISURE: :"Lifestyle & Leisure"
              LUXURY_FASHION: :"Luxury & Fashion"
              NEWS_MEDIA: :"News & Media"
              SPORTS: :Sports
              REAL_ESTATE_PROP_TECH: :"Real Estate & PropTech"
              LEGAL_COMPLIANCE: :"Legal & Compliance"
              TELECOMMUNICATIONS: :Telecommunications
              AGRICULTURE_FOOD: :"Agriculture & Food"
              PROFESSIONAL_SERVICES_AGENCIES: :"Professional Services & Agencies"
              CHEMICALS_MATERIALS: :"Chemicals & Materials"
              LOGISTICS_SUPPLY_CHAIN: :"Logistics & Supply Chain"
              HOSPITALITY_TOURISM: :"Hospitality & Tourism"
              CONSTRUCTION_BUILT_ENVIRONMENT: :"Construction & Built Environment"
              CONSUMER_PACKAGED_GOODS_CPG: :"Consumer Packaged Goods (CPG)"

              def self?.values: -> ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic::industry]
            end

            type subindustry =
              :"Defense Systems & Military Hardware"
              | :"Aerospace Manufacturing"
              | :"Avionics & Navigation Technology"
              | :"Subsea & Naval Defense Systems"
              | :"Space & Satellite Technology"
              | :"Defense IT & Systems Integration"
              | :"Software (B2B)"
              | :"Software (B2C)"
              | :"Cloud Infrastructure & DevOps"
              | :Cybersecurity
              | :"Artificial Intelligence & Machine Learning"
              | :"Data Infrastructure & Analytics"
              | :"Hardware & Semiconductors"
              | :"Fintech Infrastructure"
              | :"eCommerce & Marketplace Platforms"
              | :"Developer Tools & APIs"
              | :"Web3 & Blockchain"
              | :"XR & Spatial Computing"
              | :"Banking & Lending"
              | :"Investment Management & WealthTech"
              | :"Insurance & InsurTech"
              | :"Payments & Money Movement"
              | :"Accounting, Tax & Financial Planning Tools"
              | :"Capital Markets & Trading Platforms"
              | :"Financial Infrastructure & APIs"
              | :"Credit Scoring & Risk Management"
              | :"Cryptocurrency & Digital Assets"
              | :"BNPL & Alternative Financing"
              | :"Healthcare Providers & Services"
              | :"Pharmaceuticals & Drug Development"
              | :"Medical Devices & Diagnostics"
              | :"Biotechnology & Genomics"
              | :"Digital Health & Telemedicine"
              | :"Health Insurance & Benefits Tech"
              | :"Clinical Trials & Research Platforms"
              | :"Mental Health & Wellness"
              | :"Healthcare IT & EHR Systems"
              | :"Consumer Health & Wellness Products"
              | :"Online Marketplaces"
              | :"Direct-to-Consumer (DTC) Brands"
              | :"Retail Tech & Point-of-Sale Systems"
              | :"Omnichannel & In-Store Retail"
              | :"E-commerce Enablement & Infrastructure"
              | :"Subscription & Membership Commerce"
              | :"Social Commerce & Influencer Platforms"
              | :"Fashion & Apparel Retail"
              | :"Food, Beverage & Grocery E-commerce"
              | :"Streaming Platforms (Video, Music, Audio)"
              | :"Gaming & Interactive Entertainment"
              | :"Creator Economy & Influencer Platforms"
              | :"Advertising, Adtech & Media Buying"
              | :"Film, TV & Production Studios"
              | :"Events, Venues & Live Entertainment"
              | :"Virtual Worlds & Metaverse Experiences"
              | :"K-12 Education Platforms & Tools"
              | :"Higher Education & University Tech"
              | :"Online Learning & MOOCs"
              | :"Test Prep & Certification"
              | :"Corporate Training & Upskilling"
              | :"Tutoring & Supplemental Learning"
              | :"Education Management Systems (LMS/SIS)"
              | :"Language Learning"
              | :"Creator-Led & Cohort-Based Courses"
              | :"Special Education & Accessibility Tools"
              | :"Government Technology & Digital Services"
              | :"Civic Engagement & Policy Platforms"
              | :"International Development & Humanitarian Aid"
              | :"Philanthropy & Grantmaking"
              | :"Nonprofit Operations & Fundraising Tools"
              | :"Public Health & Social Services"
              | :"Education & Youth Development Programs"
              | :"Environmental & Climate Action Organizations"
              | :"Legal Aid & Social Justice Advocacy"
              | :"Municipal & Infrastructure Services"
              | :"Manufacturing & Industrial Automation"
              | :"Energy Production (Oil, Gas, Nuclear)"
              | :"Renewable Energy & Cleantech"
              | :"Utilities & Grid Infrastructure"
              | :"Industrial IoT & Monitoring Systems"
              | :"Construction & Heavy Equipment"
              | :"Mining & Natural Resources"
              | :"Environmental Engineering & Sustainability"
              | :"Energy Storage & Battery Technology"
              | :"Automotive OEMs & Vehicle Manufacturing"
              | :"Electric Vehicles (EVs) & Charging Infrastructure"
              | :"Mobility-as-a-Service (MaaS)"
              | :"Fleet Management"
              | :"Public Transit & Urban Mobility"
              | :"Autonomous Vehicles & ADAS"
              | :"Aftermarket Parts & Services"
              | :"Telematics & Vehicle Connectivity"
              | :"Aviation & Aerospace Transport"
              | :"Maritime Shipping"
              | :"Fitness & Wellness"
              | :"Beauty & Personal Care"
              | :"Home & Living"
              | :"Dating & Relationships"
              | :"Hobbies, Crafts & DIY"
              | :"Outdoor & Recreational Gear"
              | :"Events, Experiences & Ticketing Platforms"
              | :"Designer & Luxury Apparel"
              | :"Accessories, Jewelry & Watches"
              | :"Footwear & Leather Goods"
              | :"Beauty, Fragrance & Skincare"
              | :"Fashion Marketplaces & Retail Platforms"
              | :"Sustainable & Ethical Fashion"
              | :"Resale, Vintage & Circular Fashion"
              | :"Fashion Tech & Virtual Try-Ons"
              | :"Streetwear & Emerging Luxury"
              | :"Couture & Made-to-Measure"
              | :"News Publishing & Journalism"
              | :"Digital Media & Content Platforms"
              | :"Broadcasting (TV & Radio)"
              | :"Podcasting & Audio Media"
              | :"News Aggregators & Curation Tools"
              | :"Independent & Creator-Led Media"
              | :"Newsletters & Substack-Style Platforms"
              | :"Political & Investigative Media"
              | :"Trade & Niche Publications"
              | :"Media Monitoring & Analytics"
              | :"Professional Teams & Leagues"
              | :"Sports Media & Broadcasting"
              | :"Sports Betting & Fantasy Sports"
              | :"Fitness & Athletic Training Platforms"
              | :"Sportswear & Equipment"
              | :"Esports & Competitive Gaming"
              | :"Sports Venues & Event Management"
              | :"Athlete Management & Talent Agencies"
              | :"Sports Tech & Performance Analytics"
              | :"Youth, Amateur & Collegiate Sports"
              | :"Real Estate Marketplaces"
              | :"Property Management Software"
              | :"Rental Platforms"
              | :"Mortgage & Lending Tech"
              | :"Real Estate Investment Platforms"
              | :"Law Firms & Legal Services"
              | :"Legal Tech & Automation"
              | :"Regulatory Compliance"
              | :"E-Discovery & Litigation Tools"
              | :"Contract Management"
              | :"Governance, Risk & Compliance (GRC)"
              | :"IP & Trademark Management"
              | :"Legal Research & Intelligence"
              | :"Compliance Training & Certification"
              | :"Whistleblower & Ethics Reporting"
              | :"Mobile & Wireless Networks (3G/4G/5G)"
              | :"Broadband & Fiber Internet"
              | :"Satellite & Space-Based Communications"
              | :"Network Equipment & Infrastructure"
              | :"Telecom Billing & OSS/BSS Systems"
              | :"VoIP & Unified Communications"
              | :"Internet Service Providers (ISPs)"
              | :"Edge Computing & Network Virtualization"
              | :"IoT Connectivity Platforms"
              | :"Precision Agriculture & AgTech"
              | :"Crop & Livestock Production"
              | :"Food & Beverage Manufacturing & Processing"
              | :"Food Distribution"
              | :"Restaurants & Food Service"
              | :"Agricultural Inputs & Equipment"
              | :"Sustainable & Regenerative Agriculture"
              | :"Seafood & Aquaculture"
              | :"Management Consulting"
              | :"Marketing & Advertising Agencies"
              | :"Design, Branding & Creative Studios"
              | :"IT Services & Managed Services"
              | :"Staffing, Recruiting & Talent"
              | :"Accounting & Tax Firms"
              | :"Public Relations & Communications"
              | :"Business Process Outsourcing (BPO)"
              | :"Professional Training & Coaching"
              | :"Specialty Chemicals"
              | :"Commodity & Petrochemicals"
              | :"Polymers, Plastics & Rubber"
              | :"Coatings, Adhesives & Sealants"
              | :"Industrial Gases"
              | :"Advanced Materials & Composites"
              | :"Battery Materials & Energy Storage"
              | :"Electronic Materials & Semiconductor Chemicals"
              | :"Agrochemicals & Fertilizers"
              | :"Freight & Transportation Tech"
              | :"Last-Mile Delivery"
              | :"Warehouse Automation"
              | :"Supply Chain Visibility Platforms"
              | :"Logistics Marketplaces"
              | :"Shipping & Freight Forwarding"
              | :"Cold Chain Logistics"
              | :"Reverse Logistics & Returns"
              | :"Cross-Border Trade Tech"
              | :"Transportation Management Systems (TMS)"
              | :"Hotels & Accommodation"
              | :"Vacation Rentals & Short-Term Stays"
              | :"Restaurant Tech & Management"
              | :"Travel Booking Platforms"
              | :"Tourism Experiences & Activities"
              | :"Cruise Lines & Marine Tourism"
              | :"Hospitality Management Systems"
              | :"Event & Venue Management"
              | :"Corporate Travel Management"
              | :"Travel Insurance & Protection"
              | :"Construction Management Software"
              | :"BIM/CAD & Design Tools"
              | :"Construction Marketplaces"
              | :"Equipment Rental & Management"
              | :"Building Materials & Procurement"
              | :"Construction Workforce Management"
              | :"Project Estimation & Bidding"
              | :"Modular & Prefab Construction"
              | :"Construction Safety & Compliance"
              | :"Smart Building Technology"
              | :"Food & Beverage CPG"
              | :"Home & Personal Care CPG"
              | :"CPG Analytics & Insights"
              | :"Direct-to-Consumer CPG Brands"
              | :"CPG Supply Chain & Distribution"
              | :"Private Label Manufacturing"
              | :"CPG Retail Intelligence"
              | :"Sustainable CPG & Packaging"
              | :"Beauty & Cosmetics CPG"
              | :"Health & Wellness CPG"

            module Subindustry
              extend BrandDev::Internal::Type::Enum

              DEFENSE_SYSTEMS_MILITARY_HARDWARE: :"Defense Systems & Military Hardware"
              AEROSPACE_MANUFACTURING: :"Aerospace Manufacturing"
              AVIONICS_NAVIGATION_TECHNOLOGY: :"Avionics & Navigation Technology"
              SUBSEA_NAVAL_DEFENSE_SYSTEMS: :"Subsea & Naval Defense Systems"
              SPACE_SATELLITE_TECHNOLOGY: :"Space & Satellite Technology"
              DEFENSE_IT_SYSTEMS_INTEGRATION: :"Defense IT & Systems Integration"
              SOFTWARE_B2_B: :"Software (B2B)"
              SOFTWARE_B2_C: :"Software (B2C)"
              CLOUD_INFRASTRUCTURE_DEV_OPS: :"Cloud Infrastructure & DevOps"
              CYBERSECURITY: :Cybersecurity
              ARTIFICIAL_INTELLIGENCE_MACHINE_LEARNING: :"Artificial Intelligence & Machine Learning"
              DATA_INFRASTRUCTURE_ANALYTICS: :"Data Infrastructure & Analytics"
              HARDWARE_SEMICONDUCTORS: :"Hardware & Semiconductors"
              FINTECH_INFRASTRUCTURE: :"Fintech Infrastructure"
              E_COMMERCE_MARKETPLACE_PLATFORMS: :"eCommerce & Marketplace Platforms"
              DEVELOPER_TOOLS_APIS: :"Developer Tools & APIs"
              WEB3_BLOCKCHAIN: :"Web3 & Blockchain"
              XR_SPATIAL_COMPUTING: :"XR & Spatial Computing"
              BANKING_LENDING: :"Banking & Lending"
              INVESTMENT_MANAGEMENT_WEALTH_TECH: :"Investment Management & WealthTech"
              INSURANCE_INSUR_TECH: :"Insurance & InsurTech"
              PAYMENTS_MONEY_MOVEMENT: :"Payments & Money Movement"
              ACCOUNTING_TAX_FINANCIAL_PLANNING_TOOLS: :"Accounting, Tax & Financial Planning Tools"
              CAPITAL_MARKETS_TRADING_PLATFORMS: :"Capital Markets & Trading Platforms"
              FINANCIAL_INFRASTRUCTURE_APIS: :"Financial Infrastructure & APIs"
              CREDIT_SCORING_RISK_MANAGEMENT: :"Credit Scoring & Risk Management"
              CRYPTOCURRENCY_DIGITAL_ASSETS: :"Cryptocurrency & Digital Assets"
              BNPL_ALTERNATIVE_FINANCING: :"BNPL & Alternative Financing"
              HEALTHCARE_PROVIDERS_SERVICES: :"Healthcare Providers & Services"
              PHARMACEUTICALS_DRUG_DEVELOPMENT: :"Pharmaceuticals & Drug Development"
              MEDICAL_DEVICES_DIAGNOSTICS: :"Medical Devices & Diagnostics"
              BIOTECHNOLOGY_GENOMICS: :"Biotechnology & Genomics"
              DIGITAL_HEALTH_TELEMEDICINE: :"Digital Health & Telemedicine"
              HEALTH_INSURANCE_BENEFITS_TECH: :"Health Insurance & Benefits Tech"
              CLINICAL_TRIALS_RESEARCH_PLATFORMS: :"Clinical Trials & Research Platforms"
              MENTAL_HEALTH_WELLNESS: :"Mental Health & Wellness"
              HEALTHCARE_IT_EHR_SYSTEMS: :"Healthcare IT & EHR Systems"
              CONSUMER_HEALTH_WELLNESS_PRODUCTS: :"Consumer Health & Wellness Products"
              ONLINE_MARKETPLACES: :"Online Marketplaces"
              DIRECT_TO_CONSUMER_DTC_BRANDS: :"Direct-to-Consumer (DTC) Brands"
              RETAIL_TECH_POINT_OF_SALE_SYSTEMS: :"Retail Tech & Point-of-Sale Systems"
              OMNICHANNEL_IN_STORE_RETAIL: :"Omnichannel & In-Store Retail"
              E_COMMERCE_ENABLEMENT_INFRASTRUCTURE: :"E-commerce Enablement & Infrastructure"
              SUBSCRIPTION_MEMBERSHIP_COMMERCE: :"Subscription & Membership Commerce"
              SOCIAL_COMMERCE_INFLUENCER_PLATFORMS: :"Social Commerce & Influencer Platforms"
              FASHION_APPAREL_RETAIL: :"Fashion & Apparel Retail"
              FOOD_BEVERAGE_GROCERY_E_COMMERCE: :"Food, Beverage & Grocery E-commerce"
              STREAMING_PLATFORMS_VIDEO_MUSIC_AUDIO: :"Streaming Platforms (Video, Music, Audio)"
              GAMING_INTERACTIVE_ENTERTAINMENT: :"Gaming & Interactive Entertainment"
              CREATOR_ECONOMY_INFLUENCER_PLATFORMS: :"Creator Economy & Influencer Platforms"
              ADVERTISING_ADTECH_MEDIA_BUYING: :"Advertising, Adtech & Media Buying"
              FILM_TV_PRODUCTION_STUDIOS: :"Film, TV & Production Studios"
              EVENTS_VENUES_LIVE_ENTERTAINMENT: :"Events, Venues & Live Entertainment"
              VIRTUAL_WORLDS_METAVERSE_EXPERIENCES: :"Virtual Worlds & Metaverse Experiences"
              K_12_EDUCATION_PLATFORMS_TOOLS: :"K-12 Education Platforms & Tools"
              HIGHER_EDUCATION_UNIVERSITY_TECH: :"Higher Education & University Tech"
              ONLINE_LEARNING_MOO_CS: :"Online Learning & MOOCs"
              TEST_PREP_CERTIFICATION: :"Test Prep & Certification"
              CORPORATE_TRAINING_UPSKILLING: :"Corporate Training & Upskilling"
              TUTORING_SUPPLEMENTAL_LEARNING: :"Tutoring & Supplemental Learning"
              EDUCATION_MANAGEMENT_SYSTEMS_LMS_SIS: :"Education Management Systems (LMS/SIS)"
              LANGUAGE_LEARNING: :"Language Learning"
              CREATOR_LED_COHORT_BASED_COURSES: :"Creator-Led & Cohort-Based Courses"
              SPECIAL_EDUCATION_ACCESSIBILITY_TOOLS: :"Special Education & Accessibility Tools"
              GOVERNMENT_TECHNOLOGY_DIGITAL_SERVICES: :"Government Technology & Digital Services"
              CIVIC_ENGAGEMENT_POLICY_PLATFORMS: :"Civic Engagement & Policy Platforms"
              INTERNATIONAL_DEVELOPMENT_HUMANITARIAN_AID: :"International Development & Humanitarian Aid"
              PHILANTHROPY_GRANTMAKING: :"Philanthropy & Grantmaking"
              NONPROFIT_OPERATIONS_FUNDRAISING_TOOLS: :"Nonprofit Operations & Fundraising Tools"
              PUBLIC_HEALTH_SOCIAL_SERVICES: :"Public Health & Social Services"
              EDUCATION_YOUTH_DEVELOPMENT_PROGRAMS: :"Education & Youth Development Programs"
              ENVIRONMENTAL_CLIMATE_ACTION_ORGANIZATIONS: :"Environmental & Climate Action Organizations"
              LEGAL_AID_SOCIAL_JUSTICE_ADVOCACY: :"Legal Aid & Social Justice Advocacy"
              MUNICIPAL_INFRASTRUCTURE_SERVICES: :"Municipal & Infrastructure Services"
              MANUFACTURING_INDUSTRIAL_AUTOMATION: :"Manufacturing & Industrial Automation"
              ENERGY_PRODUCTION_OIL_GAS_NUCLEAR: :"Energy Production (Oil, Gas, Nuclear)"
              RENEWABLE_ENERGY_CLEANTECH: :"Renewable Energy & Cleantech"
              UTILITIES_GRID_INFRASTRUCTURE: :"Utilities & Grid Infrastructure"
              INDUSTRIAL_IO_T_MONITORING_SYSTEMS: :"Industrial IoT & Monitoring Systems"
              CONSTRUCTION_HEAVY_EQUIPMENT: :"Construction & Heavy Equipment"
              MINING_NATURAL_RESOURCES: :"Mining & Natural Resources"
              ENVIRONMENTAL_ENGINEERING_SUSTAINABILITY: :"Environmental Engineering & Sustainability"
              ENERGY_STORAGE_BATTERY_TECHNOLOGY: :"Energy Storage & Battery Technology"
              AUTOMOTIVE_OE_MS_VEHICLE_MANUFACTURING: :"Automotive OEMs & Vehicle Manufacturing"
              ELECTRIC_VEHICLES_E_VS_CHARGING_INFRASTRUCTURE: :"Electric Vehicles (EVs) & Charging Infrastructure"
              MOBILITY_AS_A_SERVICE_MAA_S: :"Mobility-as-a-Service (MaaS)"
              FLEET_MANAGEMENT: :"Fleet Management"
              PUBLIC_TRANSIT_URBAN_MOBILITY: :"Public Transit & Urban Mobility"
              AUTONOMOUS_VEHICLES_ADAS: :"Autonomous Vehicles & ADAS"
              AFTERMARKET_PARTS_SERVICES: :"Aftermarket Parts & Services"
              TELEMATICS_VEHICLE_CONNECTIVITY: :"Telematics & Vehicle Connectivity"
              AVIATION_AEROSPACE_TRANSPORT: :"Aviation & Aerospace Transport"
              MARITIME_SHIPPING: :"Maritime Shipping"
              FITNESS_WELLNESS: :"Fitness & Wellness"
              BEAUTY_PERSONAL_CARE: :"Beauty & Personal Care"
              HOME_LIVING: :"Home & Living"
              DATING_RELATIONSHIPS: :"Dating & Relationships"
              HOBBIES_CRAFTS_DIY: :"Hobbies, Crafts & DIY"
              OUTDOOR_RECREATIONAL_GEAR: :"Outdoor & Recreational Gear"
              EVENTS_EXPERIENCES_TICKETING_PLATFORMS: :"Events, Experiences & Ticketing Platforms"
              DESIGNER_LUXURY_APPAREL: :"Designer & Luxury Apparel"
              ACCESSORIES_JEWELRY_WATCHES: :"Accessories, Jewelry & Watches"
              FOOTWEAR_LEATHER_GOODS: :"Footwear & Leather Goods"
              BEAUTY_FRAGRANCE_SKINCARE: :"Beauty, Fragrance & Skincare"
              FASHION_MARKETPLACES_RETAIL_PLATFORMS: :"Fashion Marketplaces & Retail Platforms"
              SUSTAINABLE_ETHICAL_FASHION: :"Sustainable & Ethical Fashion"
              RESALE_VINTAGE_CIRCULAR_FASHION: :"Resale, Vintage & Circular Fashion"
              FASHION_TECH_VIRTUAL_TRY_ONS: :"Fashion Tech & Virtual Try-Ons"
              STREETWEAR_EMERGING_LUXURY: :"Streetwear & Emerging Luxury"
              COUTURE_MADE_TO_MEASURE: :"Couture & Made-to-Measure"
              NEWS_PUBLISHING_JOURNALISM: :"News Publishing & Journalism"
              DIGITAL_MEDIA_CONTENT_PLATFORMS: :"Digital Media & Content Platforms"
              BROADCASTING_TV_RADIO: :"Broadcasting (TV & Radio)"
              PODCASTING_AUDIO_MEDIA: :"Podcasting & Audio Media"
              NEWS_AGGREGATORS_CURATION_TOOLS: :"News Aggregators & Curation Tools"
              INDEPENDENT_CREATOR_LED_MEDIA: :"Independent & Creator-Led Media"
              NEWSLETTERS_SUBSTACK_STYLE_PLATFORMS: :"Newsletters & Substack-Style Platforms"
              POLITICAL_INVESTIGATIVE_MEDIA: :"Political & Investigative Media"
              TRADE_NICHE_PUBLICATIONS: :"Trade & Niche Publications"
              MEDIA_MONITORING_ANALYTICS: :"Media Monitoring & Analytics"
              PROFESSIONAL_TEAMS_LEAGUES: :"Professional Teams & Leagues"
              SPORTS_MEDIA_BROADCASTING: :"Sports Media & Broadcasting"
              SPORTS_BETTING_FANTASY_SPORTS: :"Sports Betting & Fantasy Sports"
              FITNESS_ATHLETIC_TRAINING_PLATFORMS: :"Fitness & Athletic Training Platforms"
              SPORTSWEAR_EQUIPMENT: :"Sportswear & Equipment"
              ESPORTS_COMPETITIVE_GAMING: :"Esports & Competitive Gaming"
              SPORTS_VENUES_EVENT_MANAGEMENT: :"Sports Venues & Event Management"
              ATHLETE_MANAGEMENT_TALENT_AGENCIES: :"Athlete Management & Talent Agencies"
              SPORTS_TECH_PERFORMANCE_ANALYTICS: :"Sports Tech & Performance Analytics"
              YOUTH_AMATEUR_COLLEGIATE_SPORTS: :"Youth, Amateur & Collegiate Sports"
              REAL_ESTATE_MARKETPLACES: :"Real Estate Marketplaces"
              PROPERTY_MANAGEMENT_SOFTWARE: :"Property Management Software"
              RENTAL_PLATFORMS: :"Rental Platforms"
              MORTGAGE_LENDING_TECH: :"Mortgage & Lending Tech"
              REAL_ESTATE_INVESTMENT_PLATFORMS: :"Real Estate Investment Platforms"
              LAW_FIRMS_LEGAL_SERVICES: :"Law Firms & Legal Services"
              LEGAL_TECH_AUTOMATION: :"Legal Tech & Automation"
              REGULATORY_COMPLIANCE: :"Regulatory Compliance"
              E_DISCOVERY_LITIGATION_TOOLS: :"E-Discovery & Litigation Tools"
              CONTRACT_MANAGEMENT: :"Contract Management"
              GOVERNANCE_RISK_COMPLIANCE_GRC: :"Governance, Risk & Compliance (GRC)"
              IP_TRADEMARK_MANAGEMENT: :"IP & Trademark Management"
              LEGAL_RESEARCH_INTELLIGENCE: :"Legal Research & Intelligence"
              COMPLIANCE_TRAINING_CERTIFICATION: :"Compliance Training & Certification"
              WHISTLEBLOWER_ETHICS_REPORTING: :"Whistleblower & Ethics Reporting"
              MOBILE_WIRELESS_NETWORKS_3_G_4_G_5_G: :"Mobile & Wireless Networks (3G/4G/5G)"
              BROADBAND_FIBER_INTERNET: :"Broadband & Fiber Internet"
              SATELLITE_SPACE_BASED_COMMUNICATIONS: :"Satellite & Space-Based Communications"
              NETWORK_EQUIPMENT_INFRASTRUCTURE: :"Network Equipment & Infrastructure"
              TELECOM_BILLING_OSS_BSS_SYSTEMS: :"Telecom Billing & OSS/BSS Systems"
              VO_IP_UNIFIED_COMMUNICATIONS: :"VoIP & Unified Communications"
              INTERNET_SERVICE_PROVIDERS_IS_PS: :"Internet Service Providers (ISPs)"
              EDGE_COMPUTING_NETWORK_VIRTUALIZATION: :"Edge Computing & Network Virtualization"
              IO_T_CONNECTIVITY_PLATFORMS: :"IoT Connectivity Platforms"
              PRECISION_AGRICULTURE_AG_TECH: :"Precision Agriculture & AgTech"
              CROP_LIVESTOCK_PRODUCTION: :"Crop & Livestock Production"
              FOOD_BEVERAGE_MANUFACTURING_PROCESSING: :"Food & Beverage Manufacturing & Processing"
              FOOD_DISTRIBUTION: :"Food Distribution"
              RESTAURANTS_FOOD_SERVICE: :"Restaurants & Food Service"
              AGRICULTURAL_INPUTS_EQUIPMENT: :"Agricultural Inputs & Equipment"
              SUSTAINABLE_REGENERATIVE_AGRICULTURE: :"Sustainable & Regenerative Agriculture"
              SEAFOOD_AQUACULTURE: :"Seafood & Aquaculture"
              MANAGEMENT_CONSULTING: :"Management Consulting"
              MARKETING_ADVERTISING_AGENCIES: :"Marketing & Advertising Agencies"
              DESIGN_BRANDING_CREATIVE_STUDIOS: :"Design, Branding & Creative Studios"
              IT_SERVICES_MANAGED_SERVICES: :"IT Services & Managed Services"
              STAFFING_RECRUITING_TALENT: :"Staffing, Recruiting & Talent"
              ACCOUNTING_TAX_FIRMS: :"Accounting & Tax Firms"
              PUBLIC_RELATIONS_COMMUNICATIONS: :"Public Relations & Communications"
              BUSINESS_PROCESS_OUTSOURCING_BPO: :"Business Process Outsourcing (BPO)"
              PROFESSIONAL_TRAINING_COACHING: :"Professional Training & Coaching"
              SPECIALTY_CHEMICALS: :"Specialty Chemicals"
              COMMODITY_PETROCHEMICALS: :"Commodity & Petrochemicals"
              POLYMERS_PLASTICS_RUBBER: :"Polymers, Plastics & Rubber"
              COATINGS_ADHESIVES_SEALANTS: :"Coatings, Adhesives & Sealants"
              INDUSTRIAL_GASES: :"Industrial Gases"
              ADVANCED_MATERIALS_COMPOSITES: :"Advanced Materials & Composites"
              BATTERY_MATERIALS_ENERGY_STORAGE: :"Battery Materials & Energy Storage"
              ELECTRONIC_MATERIALS_SEMICONDUCTOR_CHEMICALS: :"Electronic Materials & Semiconductor Chemicals"
              AGROCHEMICALS_FERTILIZERS: :"Agrochemicals & Fertilizers"
              FREIGHT_TRANSPORTATION_TECH: :"Freight & Transportation Tech"
              LAST_MILE_DELIVERY: :"Last-Mile Delivery"
              WAREHOUSE_AUTOMATION: :"Warehouse Automation"
              SUPPLY_CHAIN_VISIBILITY_PLATFORMS: :"Supply Chain Visibility Platforms"
              LOGISTICS_MARKETPLACES: :"Logistics Marketplaces"
              SHIPPING_FREIGHT_FORWARDING: :"Shipping & Freight Forwarding"
              COLD_CHAIN_LOGISTICS: :"Cold Chain Logistics"
              REVERSE_LOGISTICS_RETURNS: :"Reverse Logistics & Returns"
              CROSS_BORDER_TRADE_TECH: :"Cross-Border Trade Tech"
              TRANSPORTATION_MANAGEMENT_SYSTEMS_TMS: :"Transportation Management Systems (TMS)"
              HOTELS_ACCOMMODATION: :"Hotels & Accommodation"
              VACATION_RENTALS_SHORT_TERM_STAYS: :"Vacation Rentals & Short-Term Stays"
              RESTAURANT_TECH_MANAGEMENT: :"Restaurant Tech & Management"
              TRAVEL_BOOKING_PLATFORMS: :"Travel Booking Platforms"
              TOURISM_EXPERIENCES_ACTIVITIES: :"Tourism Experiences & Activities"
              CRUISE_LINES_MARINE_TOURISM: :"Cruise Lines & Marine Tourism"
              HOSPITALITY_MANAGEMENT_SYSTEMS: :"Hospitality Management Systems"
              EVENT_VENUE_MANAGEMENT: :"Event & Venue Management"
              CORPORATE_TRAVEL_MANAGEMENT: :"Corporate Travel Management"
              TRAVEL_INSURANCE_PROTECTION: :"Travel Insurance & Protection"
              CONSTRUCTION_MANAGEMENT_SOFTWARE: :"Construction Management Software"
              BIM_CAD_DESIGN_TOOLS: :"BIM/CAD & Design Tools"
              CONSTRUCTION_MARKETPLACES: :"Construction Marketplaces"
              EQUIPMENT_RENTAL_MANAGEMENT: :"Equipment Rental & Management"
              BUILDING_MATERIALS_PROCUREMENT: :"Building Materials & Procurement"
              CONSTRUCTION_WORKFORCE_MANAGEMENT: :"Construction Workforce Management"
              PROJECT_ESTIMATION_BIDDING: :"Project Estimation & Bidding"
              MODULAR_PREFAB_CONSTRUCTION: :"Modular & Prefab Construction"
              CONSTRUCTION_SAFETY_COMPLIANCE: :"Construction Safety & Compliance"
              SMART_BUILDING_TECHNOLOGY: :"Smart Building Technology"
              FOOD_BEVERAGE_CPG: :"Food & Beverage CPG"
              HOME_PERSONAL_CARE_CPG: :"Home & Personal Care CPG"
              CPG_ANALYTICS_INSIGHTS: :"CPG Analytics & Insights"
              DIRECT_TO_CONSUMER_CPG_BRANDS: :"Direct-to-Consumer CPG Brands"
              CPG_SUPPLY_CHAIN_DISTRIBUTION: :"CPG Supply Chain & Distribution"
              PRIVATE_LABEL_MANUFACTURING: :"Private Label Manufacturing"
              CPG_RETAIL_INTELLIGENCE: :"CPG Retail Intelligence"
              SUSTAINABLE_CPG_PACKAGING: :"Sustainable CPG & Packaging"
              BEAUTY_COSMETICS_CPG: :"Beauty & Cosmetics CPG"
              HEALTH_WELLNESS_CPG: :"Health & Wellness CPG"

              def self?.values: -> ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Industries::Eic::subindustry]
            end
          end
        end

        type logo =
          {
            colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Color],
            mode: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::mode,
            resolution: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Resolution,
            type: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::type_,
            url: String
          }

        class Logo < BrandDev::Internal::Type::BaseModel
          attr_reader colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Color]?

          def colors=: (
            ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Color]
          ) -> ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Color]

          attr_reader mode: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::mode?

          def mode=: (
            BrandDev::Models::BrandRetrieveResponse::Brand::Logo::mode
          ) -> BrandDev::Models::BrandRetrieveResponse::Brand::Logo::mode

          attr_reader resolution: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Resolution?

          def resolution=: (
            BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Resolution
          ) -> BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Resolution

          attr_reader type: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::type_?

          def type=: (
            BrandDev::Models::BrandRetrieveResponse::Brand::Logo::type_
          ) -> BrandDev::Models::BrandRetrieveResponse::Brand::Logo::type_

          attr_reader url: String?

          def url=: (String) -> String

          def initialize: (
            ?colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Color],
            ?mode: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::mode,
            ?resolution: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Resolution,
            ?type: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::type_,
            ?url: String
          ) -> void

          def to_hash: -> {
            colors: ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Color],
            mode: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::mode,
            resolution: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::Resolution,
            type: BrandDev::Models::BrandRetrieveResponse::Brand::Logo::type_,
            url: String
          }

          type color = { hex: String, name: String }

          class Color < BrandDev::Internal::Type::BaseModel
            attr_reader hex: String?

            def hex=: (String) -> String

            attr_reader name: String?

            def name=: (String) -> String

            def initialize: (?hex: String, ?name: String) -> void

            def to_hash: -> { hex: String, name: String }
          end

          type mode = :light | :dark | :has_opaque_background

          module Mode
            extend BrandDev::Internal::Type::Enum

            LIGHT: :light
            DARK: :dark
            HAS_OPAQUE_BACKGROUND: :has_opaque_background

            def self?.values: -> ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo::mode]
          end

          type resolution =
            { aspect_ratio: Float, height: Integer, width: Integer }

          class Resolution < BrandDev::Internal::Type::BaseModel
            attr_reader aspect_ratio: Float?

            def aspect_ratio=: (Float) -> Float

            attr_reader height: Integer?

            def height=: (Integer) -> Integer

            attr_reader width: Integer?

            def width=: (Integer) -> Integer

            def initialize: (
              ?aspect_ratio: Float,
              ?height: Integer,
              ?width: Integer
            ) -> void

            def to_hash: -> {
              aspect_ratio: Float,
              height: Integer,
              width: Integer
            }
          end

          type type_ = :icon | :logo

          module Type
            extend BrandDev::Internal::Type::Enum

            ICON: :icon
            LOGO: :logo

            def self?.values: -> ::Array[BrandDev::Models::BrandRetrieveResponse::Brand::Logo::type_]
          end
        end

        type social = { type: String, url: String }

        class Social < BrandDev::Internal::Type::BaseModel
          attr_reader type: String?

          def type=: (String) -> String

          attr_reader url: String?

          def url=: (String) -> String

          def initialize: (?type: String, ?url: String) -> void

          def to_hash: -> { type: String, url: String }
        end

        type stock = { exchange: String, ticker: String }

        class Stock < BrandDev::Internal::Type::BaseModel
          attr_reader exchange: String?

          def exchange=: (String) -> String

          attr_reader ticker: String?

          def ticker=: (String) -> String

          def initialize: (?exchange: String, ?ticker: String) -> void

          def to_hash: -> { exchange: String, ticker: String }
        end
      end
    end
  end
end
