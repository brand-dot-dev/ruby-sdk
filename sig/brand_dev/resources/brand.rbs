module BrandDev
  module Resources
    class Brand
      def retrieve: (
        ?domain: String,
        ?force_language: BrandDev::Models::BrandRetrieveParams::force_language,
        ?max_speed: bool,
        ?timeout_ms: Integer,
        ?request_options: BrandDev::request_opts
      ) -> BrandDev::Models::BrandRetrieveResponse

      def ai_query: (
        data_to_extract: ::Array[BrandDev::BrandAIQueryParams::DataToExtract],
        domain: String,
        ?specific_pages: BrandDev::BrandAIQueryParams::SpecificPages,
        ?timeout_ms: Integer,
        ?request_options: BrandDev::request_opts
      ) -> BrandDev::Models::BrandAIQueryResponse

      def identify_from_transaction: (
        transaction_info: String,
        ?force_language: BrandDev::Models::BrandIdentifyFromTransactionParams::force_language,
        ?max_speed: bool,
        ?timeout_ms: Integer,
        ?request_options: BrandDev::request_opts
      ) -> BrandDev::Models::BrandIdentifyFromTransactionResponse

      def prefetch: (
        domain: String,
        ?timeout_ms: Integer,
        ?request_options: BrandDev::request_opts
      ) -> BrandDev::Models::BrandPrefetchResponse

      def retrieve_by_email: (
        email: String,
        ?force_language: BrandDev::Models::BrandRetrieveByEmailParams::force_language,
        ?max_speed: bool,
        ?timeout_ms: Integer,
        ?request_options: BrandDev::request_opts
      ) -> BrandDev::Models::BrandRetrieveByEmailResponse

      def retrieve_by_name: (
        name: String,
        ?force_language: BrandDev::Models::BrandRetrieveByNameParams::force_language,
        ?max_speed: bool,
        ?timeout_ms: Integer,
        ?request_options: BrandDev::request_opts
      ) -> BrandDev::Models::BrandRetrieveByNameResponse

      def retrieve_by_ticker: (
        ticker: String,
        ?force_language: BrandDev::Models::BrandRetrieveByTickerParams::force_language,
        ?max_speed: bool,
        ?ticker_exchange: BrandDev::Models::BrandRetrieveByTickerParams::ticker_exchange,
        ?timeout_ms: Integer,
        ?request_options: BrandDev::request_opts
      ) -> BrandDev::Models::BrandRetrieveByTickerResponse

      def retrieve_naics: (
        input: String,
        ?timeout_ms: Integer,
        ?request_options: BrandDev::request_opts
      ) -> BrandDev::Models::BrandRetrieveNaicsResponse

      def retrieve_simplified: (
        domain: String,
        ?timeout_ms: Integer,
        ?request_options: BrandDev::request_opts
      ) -> BrandDev::Models::BrandRetrieveSimplifiedResponse

      def screenshot: (
        domain: String,
        ?full_screenshot: BrandDev::Models::BrandScreenshotParams::full_screenshot,
        ?page: BrandDev::Models::BrandScreenshotParams::page,
        ?prioritize: BrandDev::Models::BrandScreenshotParams::prioritize,
        ?request_options: BrandDev::request_opts
      ) -> BrandDev::Models::BrandScreenshotResponse

      def styleguide: (
        domain: String,
        ?prioritize: BrandDev::Models::BrandStyleguideParams::prioritize,
        ?timeout_ms: Integer,
        ?request_options: BrandDev::request_opts
      ) -> BrandDev::Models::BrandStyleguideResponse

      def initialize: (client: BrandDev::Client) -> void
    end
  end
end
